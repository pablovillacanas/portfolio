/* eslint-disable @typescript-eslint/no-explicit-any */
/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useEffect, useRef } from "react";
import { useGLTF, PerspectiveCamera, useAnimations } from "@react-three/drei";
import { useThree } from "@react-three/fiber";

export default function Portfoliobackground(mousePosition: {
  x: number;
  y: number;
}) {
  const group = useRef(null);
  const { nodes, materials, animations } = useGLTF("/portfoliobackground.gltf");
  const { camera } = useThree();

  const { actions, mixer } = useAnimations(animations, group);

  console.log("[x,y]", [mousePosition.x, mousePosition.y]);
  useEffect(() => {
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    for (const [key, _value] of Object.entries(actions)) {
      actions[key]?.play();
    }
  }, [mixer]);

  //TODO
  //scale movement in %percent margins between viewport and mouse position

  camera.lookAt(
    nodes.dummyobject.position.x,
    nodes.dummyobject.position.y,
    nodes.dummyobject.position.z
  );

  return (
    <group ref={group} dispose={null}>
      <group name="Scene">
        <directionalLight
          position={[10.63, 6.35, -5.61]}
          rotation={[-1.84, 0.6, 1.93]}
          scale={[88.31, 339.47, 232.82]}
          intensity={0.3}
          castShadow={true}
          shadow-mapSize-height={512}
          shadow-mapSize-width={512}
        />
        <group
          name="dummyobject"
          position={[-0.99, 0.72, 1.49]}
          rotation={[-0.38, 1.49, -2.74]}
          scale={[1.18, 0.04, 8.42]}
        />
        <PerspectiveCamera
          name="Camera"
          makeDefault={true}
          far={100}
          near={0.1}
          fov={40.86}
          position={[6.37, 3.45, 4.02]}
          rotation={[-0.81, 1.13, 0.76]}
          scale={[3.33, 2.76, 4.88]}
        />
        <mesh
          name="stack2"
          geometry={(nodes.stack2 as any).geometry}
          material={materials.Opaque}
          position={[0, 0.57, -0.11]}
          rotation={[0.19, 1.49, 2.94]}
          scale={2.89}
          castShadow={true}
          receiveShadow
        />
        <mesh
          name="stack1-2"
          geometry={(nodes["stack1-2"] as any).geometry}
          material={materials.Opaque}
          position={[0, 1.33, -0.12]}
          rotation={[0.23, 1.49, 2.91]}
          scale={2.89}
          castShadow={true}
          receiveShadow
        />
        <mesh
          name="stack1-1"
          geometry={(nodes["stack1-1"] as any).geometry}
          material={materials.Transparent}
          position={[0, 1.53, -0.12]}
          rotation={[0.23, 1.49, 2.91]}
          scale={2.89}
          castShadow={true}
        />
        <mesh
          name="Corner"
          geometry={(nodes.Corner as any).geometry}
          material={materials.Transparent}
          position={[0.66, 2.26, 0.28]}
          rotation={[-0.38, 1.49, -2.74]}
          scale={2.89}
          castShadow={true}
        />
        <mesh
          name="float2"
          geometry={(nodes.float2 as any).geometry}
          material={materials.Transparent}
          position={[0.45, 1.81, -1]}
          rotation={[-0.38, 1.49, -2.74]}
          scale={2.89}
        />
        <mesh
          name="Smallside"
          geometry={(nodes.Smallside as any).geometry}
          material={materials.Transparent}
          position={[0.78, 2.39, -0.44]}
          rotation={[0.06, 1.39, 3.12]}
          scale={2.89}
        />
        <mesh
          name="leftfloat"
          geometry={(nodes.leftfloat as any).geometry}
          material={materials.Transparent}
          position={[0, 2.1, 0.43]}
          rotation={[-0.38, 1.49, -2.74]}
          scale={2.89}
          castShadow={true}
        />
        <mesh
          name="cover1"
          geometry={(nodes.cover1 as any).geometry}
          material={materials.Transparent}
          position={[0, 2.37, -0.06]}
          rotation={[-0.4, 1.49, -2.74]}
          scale={2.89}
        />
        <mesh
          name="cover2"
          geometry={(nodes.cover2 as any).geometry}
          material={materials.Transparent}
          position={[0, 1.99, -0.11]}
          rotation={[-0.5, 1.47, 0.49]}
          scale={2.89}
          castShadow={true}
        />
        <mesh
          name="float3"
          geometry={(nodes.float3 as any).geometry}
          material={materials.Transparent}
          position={[-0.26, 1.79, -0.67]}
          rotation={[0.04, -0.09, 0]}
          scale={2.89}
          castShadow={true}
        />
        <mesh
          name="curverside"
          geometry={(nodes.curverside as any).geometry}
          material={materials.Transparent}
          position={[-0.22, 1.81, 0]}
          rotation={[-0.5, 1.47, 0.49]}
          scale={2.89}
          castShadow={true}
        />
        <mesh
          name="gridplane"
          geometry={(nodes.gridplane as any).geometry}
          material={materials.Gridplane}
          position={[-31.2, -0.09, -8.86]}
          rotation={[0, -0.07, 0]}
          scale={[43.59, 1, 41.76]}
          receiveShadow
        />
      </group>
    </group>
  );
}

useGLTF.preload("/portfoliobackground.gltf");
